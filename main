repeat wait() until game:IsLoaded()  -- anti afk
    game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

local DiscordLib = loadstring(game:HttpGet"https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/discord%20lib.txt")()
local win = DiscordLib:Window("ASX GRAM HUB https://discord.gg/FAPCdbW9q6 discord: grammerscripting")

local serv = win:Server("Anime Punch Simulator", "")

local BasicFarmingChannel = serv:Channel("Basic Farm")
local RaidChannel = serv:Channel("Auto Raid")
local InvasionShipChannel = serv:Channel("Auto Invasion Ship")
local HatchChannel = serv:Channel("Auto Hatching")

-- VALUES

_G.AutoHatch  = true

_G.LoopKillNearestMobs = true

_G.LoopKillRaidMobs = true
_G.LoopTeleportToRaid = true
_G.LoopStartRaid = true

_G.LoopKillInvasionShipMobs = true
_G.LoopTeleportToInvasionShip = true
_G.LoopStartInvasionShip = true





function AutoHatchLeafCity()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Leaf City",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchDesertPiece()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Desert Piece",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchSlayerVillage()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Slayer Village",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchCursedAcademy()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Cursed Academy",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchDragonCity()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Dragon City",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchBizarreIsland()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Bizarre Island",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchClownIsland()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Clown Island",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchCloverVillage()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Clover Village",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchHunterIsland()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Hunter Island",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchCriminalVillage()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Criminal Village",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchTitanCity()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Titan City",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchNemakCity()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Nemak City",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchOnlineIsland()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Online Island",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchHollowIsland()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Hollow Island",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchGhoulCity()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Ghoul City",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end

function AutoHatchChainCity()
    while _G.AutoHatch == true do
        wait(0.1)
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = "Chain  City",
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
    end
end



function LoopKillNearestMobs()
    while _G.LoopKillNearestMobs == true do
        task.wait(0.25)
        local Plr = game.Players.LocalPlayer
        
        local Enemn = nil
        
        local ClostDist = 280
        
        for _, v in pairs(workspace.Client.Enemies.World:GetChildren()) do
            
            if v:FindFirstChild("HumanoidRootPart") then
                
                local DistCryst = (v.HumanoidRootPart.Position - Plr.Character.HumanoidRootPart.Position).Magnitude
                
                if DistCryst < ClostDist then
                    
                    ClostDist = DistCryst
                    Enemn = v
                    
                    Plr.Character.HumanoidRootPart.CFrame = Enemn.HumanoidRootPart.CFrame * CFrame.new(0.25,0,0)
                    
                    local VirtualUser = game:GetService("VirtualUser")
                    local function DoClicks(x, y)
                        VirtualUser:CaptureController()
                        VirtualUser:Button1Down(Vector2.new(x,y))
                        task.wait(0.0001)
                        VirtualUser:Button1Up(Vector2.new(x, y))
                    end
                    DoClicks(250, 250)
                    break;
                end
            end
        end
    end
end



function LoopKillRaidMobs()
    while _G.LoopKillRaidMobs == true do
        task.wait(0.25)
        local Plr = game.Players.LocalPlayer
        
        local Enemn = nil
        
        local ClostDist = 280
        
        for _, v in pairs(workspace.Client.Enemies.Raid:GetChildren()) do
            
            if v:FindFirstChild("HumanoidRootPart") then
                
                local DistCryst = (v.HumanoidRootPart.Position - Plr.Character.HumanoidRootPart.Position).Magnitude
                
                if DistCryst < ClostDist then
                    
                    ClostDist = DistCryst
                    Enemn = v
                    
                    Plr.Character.HumanoidRootPart.CFrame = Enemn.HumanoidRootPart.CFrame * CFrame.new(0.25,0,0)
                    
                    local VirtualUser = game:GetService("VirtualUser")
                    local function DoClicks(x, y)
                        VirtualUser:CaptureController()
                        VirtualUser:Button1Down(Vector2.new(x,y))
                        task.wait(0.0001)
                        VirtualUser:Button1Up(Vector2.new(x, y))
                    end
                    DoClicks(250, 250)
                    break;
                end
            end
        end
    end
end

function LoopTeleportToRaid()
    while _G.LoopTeleportToRaid == true do
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(9540.1259765625, 20.674135208129883, -336.5517578125)
        wait(5)
    end
end

function LoopStartRaid()
    while _G.LoopStartRaid == true do


        local args = {
            [1] = "Enemies",
            [2] = "Bridge",
            [3] = {
                ["Module"] = "Raid",
                ["FunctionName"] = "Start",
                ["Args"] = "Friend"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))

        wait(30)

    end
end




function LoopKillInvasionShipMobs()
    while _G.LoopKillInvasionShipMobs == true do
        task.wait(0.25)
        local Plr = game.Players.LocalPlayer
        
        local Enemn = nil
        
        local ClostDist = 280
        
        for _, v in pairs(workspace.Client.Enemies.InvasionShip:GetChildren()) do
            
            if v:FindFirstChild("HumanoidRootPart") then
                
                local DistCryst = (v.HumanoidRootPart.Position - Plr.Character.HumanoidRootPart.Position).Magnitude
                
                if DistCryst < ClostDist then
                    
                    ClostDist = DistCryst
                    Enemn = v
                    
                    Plr.Character.HumanoidRootPart.CFrame = Enemn.HumanoidRootPart.CFrame * CFrame.new(0.25,0,0)
                    
                    local VirtualUser = game:GetService("VirtualUser")
                    local function DoClicks(x, y)
                        VirtualUser:CaptureController()
                        VirtualUser:Button1Down(Vector2.new(x,y))
                        task.wait(0.0001)
                        VirtualUser:Button1Up(Vector2.new(x, y))
                    end
                    DoClicks(250, 250)
                    break;
                end
            end
        end
    end
end

function LoopTeleportToInvasionShip()
    while _G.LoopTeleportToInvasionShip == true do
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-4115.75927734375, 2711.572265625, 1850.3212890625)
        wait(5)
    end
end

function LoopStartInvasionShip()
    while _G.LoopStartInvasionShip == true do

        

        local args = {
            [1] = "Enemies",
            [2] = "Bridge",
            [3] = {
                ["Module"] = "InvasionShip",
                ["FunctionName"] = "Start",
                ["Args"] = "Friend"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))

        wait(30)

    end
end

BasicFarmingChannel:Toggle(
    "Loop Kill Nearest Mobs",
    false,
    function(bool)
        _G.LoopKillNearestMobs = bool
        LoopKillNearestMobs()
    end
)

RaidChannel:Toggle(
    "Loop Kill Raid Mobs",
    false,
    function(bool)
        _G.LoopKillRaidMobs = bool
        LoopKillRaidMobs()
    end
)

RaidChannel:Toggle(
    "Loop Teleport Inside Raid",
    false,
    function(bool)
        _G.LoopTeleportToRaid = bool
        LoopTeleportToRaid()
    end
)

RaidChannel:Toggle(
    "Loop Start Raid",
    false,
    function(bool)
        _G.LoopStartRaid = bool
        LoopStartRaid()
    end
)










InvasionShipChannel:Toggle(
    "Loop Kill Invasion Ship Mobs",
    false,
    function(bool)
        _G.LoopKillInvasionShipMobs = bool
        LoopKillInvasionShipMobs()
    end
)


InvasionShipChannel:Toggle(
    "Loop Teleport Inside Invasion Ship",
    false,
    function(bool)
        _G.LoopTeleportToInvasionShip = bool
        LoopTeleportToInvasionShip()
    end
)


InvasionShipChannel:Toggle(
    "Loop Start Invasion Ship",
    false,
    function(bool)
        _G.LoopStartInvasionShip = bool
        LoopStartInvasionShip()
    end
)
































HatchChannel:Toggle(
    "Open Leaf City Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchLeafCity()
    end
)
HatchChannel:Toggle(
    "Open Desert Piece Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchDesertPiece()
    end
)
HatchChannel:Toggle(
    "Open Slayer Village Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchSlayerVillage()
    end
)
HatchChannel:Toggle(
    "Open Cursed Academy Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchCursedAcademy()
    end
)
HatchChannel:Toggle(
    "Open Dragon City Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchDragonCity()
    end
)
HatchChannel:Toggle(
    "Open Bizarre Island Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchBizarreIsland()
    end
)
HatchChannel:Toggle(
    "Open Clown Island Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchClownIsland()
    end
)
HatchChannel:Toggle(
    "Open Clover Village Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchCloverVillage()
    end
)
HatchChannel:Toggle(
    "Open Hunter Island Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchHunterIsland()
    end
)
HatchChannel:Toggle(
    "Open Criminal Village Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchCriminalVillage()
    end
)
HatchChannel:Toggle(
    "Open Titan City Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchTitanCity()
    end
)
HatchChannel:Toggle(
    "Open Nemak City Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchNemakCity()
    end
)
HatchChannel:Toggle(
    "Open Online Island Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchOnlineIsland()
    end
)
HatchChannel:Toggle(
    "Open Hollow Island Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchHollowIsland()
    end
)
HatchChannel:Toggle(
    "Open Ghoul City Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchGhoulCity()
    end
)
HatchChannel:Toggle(
    "Open Chain City Star",
    false,
    function(bool)
        _G.AutoHatch = bool
        AutoHatchChainCity()
    end
)
